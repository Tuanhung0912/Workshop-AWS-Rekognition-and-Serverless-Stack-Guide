[
{
	"uri": "//localhost:1313/vi/3-lambdafunction/3.1-analyzefunction/",
	"title": "Cấu hình Analyze Function",
	"tags": [],
	"description": "",
	"content": "Cấu hình Analyze Function để thực hiện việc phân tích hình ảnh 1. Tìm kiếm và truy cập trang dịch vụ của Lambda\nTại thanh tìm kiếm, bạn hãy nhập: Lambda Kết quả hiển thị như hình ảnh bên dưới: Tại trang chính của dịch vụ lambda, bạn hãy tiến hành tạo mới một Function bằng cách bấm vào button Create a function như hình ảnh bên dưới: Tiếp theo, bạn sẽ được chuyển đến trang cấu hình cho Lambda Function như hình ảnh bên dưới: 2. Cấu hình cho Analyze Function tại trang Create a function\nTại trang tạo mới, để cấu hình cho function mà bạn sắp chuẩn bị phải tạo Thì bạn cần phải nhập thông tin và chọn các cấu hình phù hợp nhất cho bài lab, bạn hãy thực hiện theo các bước sau đây: Trong phần đầu tiên, sẽ có 3 mục để tạo trước template của Lambda Function: Author from scratch, Use a blueprint, Container image\nBạn hãy chọn Author from scratch, điều này sẽ tạo một cấu trúc đoạn code đơn giản có nội dung mẫu là in ra dòng chữ Hello World Trong phần Basic information:\nFunction name: nhập tên cho function. Ví dụ: AnalyzeImage (hoặc đặt tên tùy ý) Runtime: bạn hãy chọn Python 3.11 Architecture: bạn hãy chọn chuẩn x86_64 Trong phần Change default execution role:\nExcution role: bạn hãy chọn Use an existing role, điều này cho phép bạn chọn một Role đã tạo trước đó và phù hợp với Lambda Function Existing role: bạn hãy chọn LambdaAnalyzeRole, đây là Role mà phần trước đã tạo Sau khi đã cấu hình xong, bạn bấm vào button Create function để tiến hành tạo Lambda function Kết quả như hình ảnh bên dưới: Đợi vài giây để hệ thống tạo Lambda function mà bạn đã cấu hình Sau khi tạo xong thì hệ thống sẽ trả về thông báo tạo thành công Lambda function của bạn như hình ảnh bên dưới: Tại đây chính là phần mà bạn có thể thao tác các dòng lệnh code để lập trình bằng ngôn ngữ Python như đã cấu hình ở phần trước đó: 3. Cấu hình Code Analyze Function tại phần Code Source\nTại đây bạn sẽ tiến hành nhập code để chức năng phân tích ảnh có thể hoạt động Bạn hãy nhập code theo cấu trúc như sau: import json import boto3 import base64 # Khởi tạo client Rekognition để gọi dịch vụ nhận diện ảnh rekognition = boto3.client(\u0026#39;rekognition\u0026#39;) def lambda_handler(event, context): try: # Kiểm tra xem request body có tồn tại không if \u0026#39;body\u0026#39; not in event or not event[\u0026#39;body\u0026#39;]: return { \u0026#34;statusCode\u0026#34;: 400, \u0026#34;body\u0026#34;: json.dumps({\u0026#34;error\u0026#34;: \u0026#34;Empty request body\u0026#34;}) } # Lấy phần body từ sự kiện gửi vào (kiểm tra có phải là base64 không) body_str = event[\u0026#39;body\u0026#39;] if event.get(\u0026#34;isBase64Encoded\u0026#34;): # Nếu API Gateway cấu hình truyền base64 body_str = base64.b64decode(event[\u0026#39;body\u0026#39;]).decode(\u0026#39;utf-8\u0026#39;) # Chuyển chuỗi JSON thành dictionary Python body = json.loads(body_str) # Lấy dữ liệu ảnh dạng base64 từ trường \u0026#34;image\u0026#34; image_base64 = body.get(\u0026#39;image\u0026#39;) # Nếu không có ảnh thì trả về lỗi if not image_base64: return { \u0026#34;statusCode\u0026#34;: 400, \u0026#34;body\u0026#34;: json.dumps({\u0026#34;error\u0026#34;: \u0026#34;Missing \u0026#39;image\u0026#39; in request body\u0026#34;}) } # Giải mã ảnh từ base64 thành dạng bytes image_bytes = base64.b64decode(image_base64) # Gọi AWS Rekognition để nhận diện nhãn trong ảnh response = rekognition.detect_labels( Image={\u0026#39;Bytes\u0026#39;: image_bytes}, # Truyền ảnh dạng bytes MaxLabels=10, # Giới hạn tối đa 10 nhãn trả về MinConfidence=75 # Chỉ lấy nhãn có độ tin cậy từ 75% trở lên ) # Trả kết quả nhận diện về dưới dạng JSON return { \u0026#34;statusCode\u0026#34;: 200, \u0026#34;body\u0026#34;: json.dumps({ \u0026#34;labels\u0026#34;: response.get(\u0026#39;Labels\u0026#39;, []), \u0026#34;message\u0026#34;: \u0026#34;Image analyzed successfully\u0026#34; }), \u0026#34;headers\u0026#34;: { \u0026#34;Content-Type\u0026#34;: \u0026#34;application/json\u0026#34;, \u0026#34;Access-Control-Allow-Origin\u0026#34;: \u0026#34;*\u0026#34; # Cho phép gọi từ frontend } } except Exception as e: # Nếu có lỗi thì log ra và trả về mã lỗi 500 print(\u0026#34;Error:\u0026#34;, str(e)) return { \u0026#34;statusCode\u0026#34;: 500, \u0026#34;body\u0026#34;: json.dumps({\u0026#34;error\u0026#34;: str(e)}) } Sau khi nhập vào trong phần Code Source theo cấu trúc trên bạn có thể tiến hành lưu lại cách thay đổi bằng cách: Bấm button Deploy hoặc tổ hợp phím (Ctrl + Shift + U) Đợi một vài giây, hệ thống sẽ lưu lại tất cả các thay đổi của bạn và trả về thông báo lưu thành công Kết quả như các hình bên dưới: Bạn đã hoàn thành bước cấu hình Lambda Function cho chức năng Phân tích ảnh bằng cách gọi Client của AWS Rekognition\n"
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.1-clonefrontend/",
	"title": "Clone và Setup Front-End",
	"tags": [],
	"description": "",
	"content": "Clone Project từ Repository Github 1. Clone Project về bằng đường link của Repository Github\nTrước hết, bạn hãy tải và cài đặt môi trường run-time của Javascript để có thể triển khai dự án\nLink cài đặt tham khảo: node.js Sau đó, bạn hãy tải và cài đặt môi trường Code Editor phổ biến là Visual Studio Code hoặc các môi trường Code Editor tương đương khác\nLink cài đặt tham khảo: Visual Studio Code Tiếp theo, truy cập đường link github của project Bấm vào biểu tượng Code màu xanh lá và Copy đường link của Repository như trong hình bên dưới: Sau khi đã truy cập và copy đường link của Repository Bạn hãy mở Command Prompt tại thư mục bạn muốn chứa Project như sau Bạn hãy tiến hành Clone Project về thư mục mà bạn muốn chứa Project với cấu trúc như sau: git clone https://github.com/Tuanhung0912/Workshop-AWS-Rekognition-and-Serverless-Stack-Frontend.git Sau khi bạn đã Clone Project từ Repository về thì sẽ được kết quả như hình bên dưới: 2. Tiến hành mở Project và Setup\nSau khi đã Clone Project từ Repository về thành công Bây giờ, hãy tiến hành mở Project nhanh bằng Command Prompt như hình bên dưới: Sau khi nhập lệnh từ Command Prompt để mở project thì sẽ được kết quả như hình bên dưới: Tiếp theo, ta tiến hành tải các dependencies và thư viện cần thiết cho project chạy bằng môi trường run-time node.js Mở một Terminal trong Project và nhập câu lệnh với cấu trúc như sau: npm install Sau khi nhập lệnh như trên thì cần đợi 1-2 phút để tải và hoàn thành Sau khi tải xong các thư viện cần thiết thì trong Project xuất hiện thư mục node_modules như hình bên dưới: Tiếp theo, ta tiến hành cập nhật lại các thư viện cho Vite bằng câu lệnh với cấu trúc như sau: npm update vite Sau khi nhập câu lệnh như trên để update các thư viện cần thiết cho Vite thì được kết quả như hình bên dưới: 3. Triển khai Project\nTiếp theo, ta tiến hành nhập dòng lệnh với cấu trúc như sau để có thể triển khai trang web: npm run dev Sau khi chạy câu lệnh trên thì Terminal cho ra kết quả như sau: Truy cập địa chỉ http://localhost:5173/ để khởi chạy trang Web Cần chờ 1-2 phút để Project Build khi chạy lần đầu Sau khi chạy xong ta được kết quả hiển thị trang Web như hình bên dưới: Bạn đã hoàn thành bước chuẩn bị đầu tiên để Setup và khởi chạy trang web\n"
},
{
	"uri": "//localhost:1313/vi/1-introduce/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Amazon Rekognition là một dịch vụ AI mạnh mẽ của AWS, cung cấp khả năng nhận diện và phân tích hình ảnh và video. Amazon Rekognition giúp bạn nhận diện các đối tượng, khuôn mặt, văn bản, và các cảnh vật trong ảnh mà không cần phải xây dựng mô hình học sâu phức tạp. Dưới đây là mô hình triển khai của bài lab:\nTừng bước hoạt động của mô hình:\nBước 1: Người dùng tải ảnh từ giao diện web để thực hiện nhận diện ảnh. Bước 2: Frontend gửi ảnh thông qua HTTP POST đến API Gateway để bắt đầu xử lý. Bước 3: API Gateway kích hoạt hàm Lambda để xử lý yêu cầu phân tích ảnh. Bước 4: Lambda ghi log hoạt động (event, lỗi, thông tin nhận diện) vào CloudWatch để theo dõi và giám sát. Bước 5: Lambda gửi ảnh đến dịch vụ Rekognition để phân tích nội dung và trích xuất thông tin. Bước 6: Rekognition trả về kết quả phân tích (nhãn, đối tượng, độ tin cậy) dưới dạng JSON. Bước 7: Lambda tạo file JSON chứa kết quả và xử lý lại ảnh đầu vào. Bước 8: Cả ảnh gốc và file JSON sẽ được lưu vào S3 Bucket để lưu trữ lâu dài hoặc chia sẻ. Bước 9: Lambda được cấp quyền thông qua IAM Role để có thể gọi Rekognition, ghi log CloudWatch và ghi dữ liệu vào S3. Với việc sử dụng Amazon Rekognition, bạn sẽ có được những ưu điểm sau:\nDễ dàng nhận diện các đối tượng và khuôn mặt trong ảnh mà không cần xây dựng mô hình AI riêng. Hỗ trợ phân tích văn bản trong ảnh, giúp nhận diện thông tin và chữ viết trên hình ảnh. Có thể cấu hình và tích hợp với các dịch vụ AWS Serverless như Lambda, S3, và API Gateway, giúp triển khai nhanh chóng và tiết kiệm chi phí. Tự động hóa quy trình phân tích hình ảnh và video mà không cần phần cứng đắt tiền hoặc quản lý hạ tầng. Cung cấp các API dễ sử dụng cho việc nhận diện hình ảnh và video, giúp lập trình viên dễ dàng tích hợp vào ứng dụng Quản lý các quyền truy cập và bảo mật thông qua AWS IAM để đảm bảo tính bảo mật và tuân thủ chính sách của công ty. Log lại các hành động và phân tích kết quả để giúp người dùng dễ dàng theo dõi và kiểm tra hiệu quả của mô hình AI. Với những ưu điểm trên, bạn có thể sử dụng Amazon Rekognition và Serverless Stack để xây dựng các ứng dụng AI nhận diện hình ảnh thông minh, tiết kiệm thời gian và chi phí khi triển khai và bảo trì hệ thống.\n"
},
{
	"uri": "//localhost:1313/vi/",
	"title": "Intelligent Image Recognition",
	"tags": [],
	"description": "",
	"content": "AI Nhận Diện Ảnh Thông Minh với Amazon Rekognition và Serverless Stack Tổng quan Trong bài lab này, bạn sẽ tìm hiểu các khái niệm cơ bản và thực hành về Amazon Rekognition – một dịch vụ AI nhận diện ảnh mạnh mẽ, và cách triển khai giải pháp Serverless Stack. Bạn sẽ thực hành tạo các pipeline tự động để phân tích và nhận diện hình ảnh sử dụng Amazon Rekognition, đồng thời kết hợp với các dịch vụ Serverless như AWS Lambda, S3, và API Gateway để xây dựng một hệ thống xử lý ảnh thông minh.\nNội dung Giới thiệu Các bước chuẩn bị Cấu hình Lambda Function Cấu hình API Gateway "
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/",
	"title": "Các bước chuẩn bị",
	"tags": [],
	"description": "",
	"content": "Tổng Quan Trước khi bắt đầu triển khai hệ thống AI nhận diện ảnh thông minh, bạn cần chuẩn bị một số thành phần cơ bản trong môi trường AWS để đảm bảo quá trình phân tích và lưu trữ diễn ra suôn sẻ. Cụ thể, bạn sẽ tạo một S3 Bucket để lưu trữ ảnh gốc mà người dùng tải lên, cũng như các tệp kết quả phân tích ở định dạng JSON. Tiếp theo, cần cấu hình một IAM Role với các quyền truy cập phù hợp như AmazonS3FullAccess, AmazonRekognitionFullAccess, CloudWatchLogsFullAccess\u0026hellip; để Lambda function có thể gọi dịch vụ Rekognition, ghi log vào CloudWatch và ghi dữ liệu vào S3\nNội Dung Clone và Setup Front-End Tạo S3 Bucket Tạo IAM Role và Attach Policy "
},
{
	"uri": "//localhost:1313/vi/3-lambdafunction/3.2-uploadfunction/",
	"title": "Cấu hình Upload Function",
	"tags": [],
	"description": "",
	"content": "Cấu hình Upload Function để thực hiện việc upload hình ảnh và kết quả phân tích ảnh 1. Tìm đến trang danh sách chứa các Lambda function\nỞ phần trước khi đã cấu hình cho Analyze Function thì bạn có thể trở lại danh sách chứa các Lambda Function hiện có nhanh bằng cách như sau: Bạn hãy nhìn lên góc trái phía trên thì sẽ có mục Functions Kết quả như hình sau: Tại trang hiện thị tất cả các Function hiện có, ta có thể thấy được Analyze Function mà bạn đã cấu hình ở phần trước Tiếp theo, bạn hãy bấm vào button Create function nằm ở góc bên phải để tiến hành tạo thêm một function mới như hình ảnh ở dưới: 3. Cấu hình cho Upload Function tại trang Create function\nTại trang tạo mới, để cấu hình cho function mà bạn sắp chuẩn bị phải tạo Thì bạn cần phải nhập thông tin và chọn các cấu hình phù hợp nhất cho bài lab, bạn hãy thực hiện theo các bước sau đây: Trong phần đầu tiên, sẽ có 3 mục để tạo trước template của Lambda Function: Author from scratch, Use a blueprint, Container image\nBạn hãy chọn Author from scratch, điều này sẽ tạo một cấu trúc đoạn code đơn giản có nội dung mẫu là in ra dòng chữ Hello World Trong phần Basic information:\nFunction name: nhập tên cho function. Ví dụ: UploadImage (hoặc đặt tên tùy ý) Runtime: bạn hãy chọn Python 3.11 Architecture: bạn hãy chọn chuẩn x86_64 Trong phần Change default execution role:\nExcution role: bạn hãy chọn Use an existing role, điều này cho phép bạn chọn một Role đã tạo trước đó và phù hợp với Lambda Function Existing role: bạn hãy chọn LambdaAnalyzeRole, đây là Role mà phần trước đã tạo Sau khi đã cấu hình xong, bạn bấm vào button Create function để tiến hành tạo Lambda function Kết quả như hình ảnh bên dưới: Đợi vài giây để hệ thống tạo Lambda function mà bạn đã cấu hình Sau khi tạo xong thì hệ thống sẽ trả về thông báo tạo thành công Lambda function của bạn như hình ảnh bên dưới: Tại đây chính là phần mà bạn có thể thao tác các dòng lệnh code để lập trình bằng ngôn ngữ Python như đã cấu hình ở phần trước đó: 3. Cấu hình Code Upload Function tại phần Code Source\nTại đây bạn sẽ tiến hành nhập code để chức năng upload hình ảnh và kết quả phân tích có thể hoạt động Bạn hãy nhập code theo cấu trúc như sau: import json import boto3 import base64 import uuid import os # Khởi tạo client S3 s3 = boto3.client(\u0026#39;s3\u0026#39;) # Lấy tên bucket từ biến môi trường (thay thế bằng tên bucket của bạn) BUCKET = os.environ.get(\u0026#34;BUCKET_NAME\u0026#34;, \u0026#34;your-bucket-name\u0026#34;) def lambda_handler(event, context): try: # Parse nội dung body từ HTTP request (định dạng JSON) body = json.loads(event[\u0026#34;body\u0026#34;]) # Lấy dữ liệu ảnh (base64) và kết quả phân tích từ frontend gửi lên image_base64 = body.get(\u0026#34;image\u0026#34;) result_data = body.get(\u0026#34;result\u0026#34;) # Kiểm tra nếu thiếu ảnh hoặc kết quả thì trả lỗi if not image_base64 or not result_data: return { \u0026#34;statusCode\u0026#34;: 400, \u0026#34;body\u0026#34;: json.dumps({\u0026#34;error\u0026#34;: \u0026#34;Missing image or result\u0026#34;}) } # Giải mã ảnh base64 thành dạng bytes image_bytes = base64.b64decode(image_base64) # Tạo tên file ảnh ngẫu nhiên bằng UUID filename = f\u0026#34;image-{uuid.uuid4()}.jpg\u0026#34; # Upload ảnh gốc lên thư mục \u0026#39;images/\u0026#39; trong bucket S3 s3.put_object( Bucket=BUCKET, Key=f\u0026#34;images/{filename}\u0026#34;, Body=image_bytes, ContentType=\u0026#34;image/jpeg\u0026#34; ) # Tạo tên file JSON tương ứng và upload kết quả phân tích vào thư mục \u0026#39;results/\u0026#39; s3.put_object( Bucket=BUCKET, Key=f\u0026#34;results/{filename.replace(\u0026#39;.jpg\u0026#39;, \u0026#39;.json\u0026#39;)}\u0026#34;, Body=json.dumps(result_data), ContentType=\u0026#34;application/json\u0026#34; ) # Trả kết quả thành công về cho frontend, bao gồm link ảnh và file JSON return { \u0026#34;statusCode\u0026#34;: 200, \u0026#34;body\u0026#34;: json.dumps({ \u0026#34;message\u0026#34;: \u0026#34;Upload thành công\u0026#34;, \u0026#34;imageUrl\u0026#34;: f\u0026#34;https://{BUCKET}.s3.amazonaws.com/images/{filename}\u0026#34;, \u0026#34;resultUrl\u0026#34;: f\u0026#34;https://{BUCKET}.s3.amazonaws.com/results/{filename.replace(\u0026#39;.jpg\u0026#39;, \u0026#39;.json\u0026#39;)}\u0026#34; }), \u0026#34;headers\u0026#34;: { \u0026#34;Access-Control-Allow-Origin\u0026#34;: \u0026#34;*\u0026#34;, # Cho phép truy cập từ mọi domain \u0026#34;Content-Type\u0026#34;: \u0026#34;application/json\u0026#34; } } except Exception as e: # Trả lỗi 500 nếu có exception xảy ra và cho phép CORS return { \u0026#34;statusCode\u0026#34;: 500, \u0026#34;body\u0026#34;: json.dumps({\u0026#34;error\u0026#34;: str(e)}), \u0026#34;headers\u0026#34;: {\u0026#34;Access-Control-Allow-Origin\u0026#34;: \u0026#34;*\u0026#34;} } Sau khi nhập vào trong phần Code Source theo cấu trúc trên bạn có thể tiến hành lưu lại cách thay đổi bằng cách: Bấm button Deploy hoặc tổ hợp phím (Ctrl + Shift + U) Đợi một vài giây, hệ thống sẽ lưu lại tất cả các thay đổi của bạn và trả về thông báo lưu thành công Lưu ý, bạn hãy thay thế tên bucket của mình, không được để trùng lặp tên bucket\nKết quả như các hình bên dưới: Bạn đã hoàn thành bước cấu hình Lambda Function cho chức năng upload hình ảnh và kết quả phân tích lên S3 Bucket\n"
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.2-creates3bucket/",
	"title": "Tạo S3 Bucket để lưu trữ",
	"tags": [],
	"description": "",
	"content": "Khởi tạo S3 Bucket dùng để lưu trữ hình ảnh và kết quả phân tích 1. Truy cập vào Console và tìm dịch vụ Amazon S3\nTruy cập vào trang AWS Management Console Sau đó, tiến hành đăng nhập tài khoản của bạn theo hình bên dưới: Sau khi bấm vào trang thì sẽ hiển thị trang đăng nhập với các trường thông tin cần nhập như hình bên dưới: Lưu ý, đây là điều kiện bắt buộc để có thể làm các bước tiếp theo, nếu bạn chưa có tài khoản hãy tiến hành đăng ký tài khoản\nLink tham khảo cách tạo tài khoản: Tạo tài khoản\nSau khi đã đăng nhập tài khoản thành công thì sẽ chuyển người dùng đến trang chính của AWS Manage Console như hình bên dưới:\nTại thanh tìm kiếm, hãy nhập S3 Chọn vào dịch vụ S3 Kết quả như hình bên dưới: Bạn có thể đánh dấu sao cho dịch vụ mà bạn sử dụng thường xuyên trong suốt quá trình làm, từ đó giúp bạn thuận tiện hơn trong việc truy cập nhanh chóng\nTại giao diện chính của dịch vụ S3, bạn hãy bấm vào nút Create Bucket như hình bên dưới: 2. Cấu hình cho S3 Bucket\nSau khi bấm vào Create Bucket thì sẽ chuyển đến phần khởi tạo Bucket như hình bên dưới: Tại phần General configuration:\nAWS Region: Asia Pacific (Singapore) ap-southeast-1 (hoặc tùy theo Region của bạn muốn sử dụng) Bucket type: chọn General purpose Bucket name: nhập rekognition-image-upload-0912 Tại phần Object Ownership:\nChọn ACLs disable (recommended) Lưu ý, Bucket Name của bạn phải là duy nhất và không trùng lặp với các Bucket khác\nTại phần Block Public Access setting for this bucket:\nBỏ chọn Block all public access Bỏ chọn Block public access to buckets and objects granted through new access control lists (ACLs) Bỏ chọn Block public access to buckets and objects granted through any access control lists (ACLs) Bỏ chọn Block public access to buckets and objects granted through new public bucket or access point policies Bỏ chọn Block public and cross-account access to buckets and objects through any public bucket or access point policies Tích chọn I acknowledge that the current settings might result in this bucket and the objects within becoming public. Tại phần Bucket Versioning:\nBucket Versioning: chọn Disable Tại phần Default Encryption:\nEncryption type: chọn Server-side encryption with Amazon S3 manage keys (SSE-S3) Bucket key: chọn Enable Sau khi đã hoàn thành các bước trên, cuộn xuống cuối trang và bấm Create Bucket như hình bên dưới: Đợi vài giây, bạn sẽ được chuyển đến trang danh sách bucket và hiển thị thông báo tạo thành công bucket như hình bên dưới: Bạn đã hoàn thành bước tạo S3 Bucket để lưu trữ hình ảnh và kết quả phân tích\n"
},
{
	"uri": "//localhost:1313/vi/3-lambdafunction/",
	"title": "Cấu hình Lambda Funtion",
	"tags": [],
	"description": "",
	"content": "Tổng Quan Trong phần này, bạn sẽ tiến hành cấu hình AWS Lambda Function – một thành phần cốt lõi trong hệ thống AI nhận diện ảnh thông minh. Lambda sẽ đóng vai trò xử lý trung gian: nhận ảnh từ phía người dùng thông qua API Gateway, gửi ảnh đến dịch vụ Amazon Rekognition để phân tích nội dung, xử lý kết quả và lưu trữ thông tin phân tích dưới dạng JSON trong S3. Ngoài ra, Lambda cũng sẽ ghi log toàn bộ quá trình hoạt động vào CloudWatch để phục vụ mục đích giám sát và khắc phục lỗi. Việc cấu hình đúng Lambda function là bước quan trọng để đảm bảo hệ thống hoạt động chính xác, bảo mật và mở rộng linh hoạt theo mô hình Serverless.\nNội Dung Cấu hình Analyze Function Cấu hình Upload Function "
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.3-createiamrole/",
	"title": "Tạo IAM Role và Attach Policy",
	"tags": [],
	"description": "",
	"content": "Tạo IAM Role mới và Attach Policy vào cho Role 1. Tìm kiếm và truy cập dịch vụ IAM để tạo Role\nTại thanh tìm kiếm, nhập vào IAM Sau khi tìm kiếm, bấm vào dịch vụ IAM như hình bên dưới: Tại trang dịch vụ của IAM, ở bên trái Navigation Panel Chọn Roles như hình bên dưới: Tại trang Role, ta có thể thấy được danh sách nhiều Role phổ biến và hay sử dụng của AWS Ở phía bên phải, bạn hãy bấm button Create Role như sau: 2. Tạo mới Role và cấu hình chi tiết\nTại trang tạo mới Role, ta có thể nhìn thấy khi tạo Role khi cần trải qua 3 bước chính như hình bên dưới: Tại phần Select Trusted entity:\nTrusted entity type: Chọn AWS Service Tại phần Use Case:\nService or use case: chọn Lambda Sau đó bấm button Next Tại trang thực hiện bước 2 Add permissions cho Role, bạn có thể thấy được hơn 1000+ Permission Policy như hình bên dưới: Tuy nhiên, bạn chỉ cần tìm một vài Policy phù hợp với bài Lab Ở đây, ta sẽ tìm kiếm và chọn 3 Policy cần sử dụng như sau: AmazonS3FullAccess, AmazonRekognitionFullAccess, CloudWatchLogsFullAccess. Sau khi đã chọn xong, bạn hãy bấm button Next Kết quả như các hình bên dưới: Tại trang thực hiện bước 3: Name, review, and create, Bạn sẽ xem lại toàn bộ cấu hình của cả hai bước trên Tại phần Role details:\nRole name: ta sẽ đặt tên cho Role, Ví dụ: LambdaAnalyzeRole Description: bạn có thể để mặc định hoặc ghi chú tùy ý Ở phần Step 2: Add Permission, bạn có thể xem lại các Policy đã thêm vào trước đó một cách chi tiết Sau khi đã kiểm tra toàn bộ các thông tin thì bạn bấm Create Role để tiến hành tạo Role Đợi vài giây, sau khi tạo xong hệ thống sẽ chuyển bạn về trang chủ của phần Role và hiển thị thông báo tạo thành công như hình bên dưới: Bạn đã hoàn thành các bước chuẩn bị cần thiết để có thể làm bước tiếp theo\n"
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]