[
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.1-clonefrontend/",
	"title": "Clone và Setup Front-End",
	"tags": [],
	"description": "",
	"content": "Clone Project từ Repository Github 1. Clone Project về bằng đường link của Repository Github\nTrước hết, bạn hãy tải và cài đặt môi trường run-time của Javascript để có thể triển khai dự án\nLink cài đặt tham khảo: node.js Sau đó, bạn hãy tải và cài đặt môi trường Code Editor phổ biến là Visual Studio Code hoặc các môi trường Code Editor tương đương khác\nLink cài đặt tham khảo: node.js Truy cập đường link github của project Bấm vào biểu tượng Code màu xanh lá và Copy đường link của Repository như trong hình bên dưới: Sau khi đã truy cập và copy đường link của Repository Bạn hãy mở Command Prompt tại thư mục bạn muốn chứa Project như sau Bạn hãy tiến hành Clone Project về thư mục mà bạn muốn chứa Project với cấu trúc như sau: git clone https://github.com/Tuanhung0912/Workshop-AWS-Rekognition-and-Serverless-Stack-Frontend.git Sau khi bạn đã Clone Project từ Repository về thì sẽ được kết quả như hình bên dưới: 2. Tiến hành mở Project và Setup\nSau khi đã Clone Project từ Repository về thành công Bây giờ, hãy tiến hành mở Project nhanh bằng Command Prompt như hình bên dưới: Sau khi nhập lệnh từ Command Prompt để mở project thì sẽ được kết quả như hình bên dưới: Tiếp theo, ta tiến hành tải các dependencies và thư viện cần thiết cho project chạy bằng môi trường run-time node.js Mở một Terminal trong Project và nhập câu lệnh với cấu trúc như sau: npm install Sau khi nhập lệnh như trên thì cần đợi 1-2 phút để tải và hoàn thành Sau khi tải xong các thư viện cần thiết thì trong Project xuất hiện thư mục node_modules như hình bên dưới: Tiếp theo, ta tiến hành cập nhật lại các thư viện cho Vite bằng câu lệnh với cấu trúc như sau: npm update vite Sau khi nhập câu lệnh như trên để update các thư viện cần thiết cho Vite thì được kết quả như hình bên dưới: 3. Triển khai Project\nTiếp theo, ta tiến hành nhập dòng lệnh với cấu trúc như sau để có thể triển khai trang web: npm run dev Sau khi chạy câu lệnh trên thì Terminal cho ra kết quả như sau: Truy cập địa chỉ http://localhost:5173/ để khởi chạy trang Web Cần chờ 1-2 phút để Project Build khi chạy lần đầu Sau khi chạy xong ta được kết quả hiển thị trang Web như hình bên dưới: Bạn đã hoàn thành bước chuẩn bị đầu tiên để Setup và khởi chạy trang web\n"
},
{
	"uri": "//localhost:1313/vi/1-introduce/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Amazon Rekognition là một dịch vụ AI mạnh mẽ của AWS, cung cấp khả năng nhận diện và phân tích hình ảnh và video. Amazon Rekognition giúp bạn nhận diện các đối tượng, khuôn mặt, văn bản, và các cảnh vật trong ảnh mà không cần phải xây dựng mô hình học sâu phức tạp. Dưới đây là mô hình triển khai của bài lab:\nTừng bước hoạt động của mô hình:\nBước 1: Người dùng tải ảnh từ giao diện web để thực hiện nhận diện ảnh. Bước 2: Frontend gửi ảnh thông qua HTTP POST đến API Gateway để bắt đầu xử lý. Bước 3: API Gateway kích hoạt hàm Lambda để xử lý yêu cầu phân tích ảnh. Bước 4: Lambda ghi log hoạt động (event, lỗi, thông tin nhận diện) vào CloudWatch để theo dõi và giám sát. Bước 5: Lambda gửi ảnh đến dịch vụ Rekognition để phân tích nội dung và trích xuất thông tin. Bước 6: Rekognition trả về kết quả phân tích (nhãn, đối tượng, độ tin cậy) dưới dạng JSON. Bước 7: Lambda tạo file JSON chứa kết quả và xử lý lại ảnh đầu vào. Bước 8: Cả ảnh gốc và file JSON sẽ được lưu vào S3 Bucket để lưu trữ lâu dài hoặc chia sẻ. Bước 9: Lambda được cấp quyền thông qua IAM Role để có thể gọi Rekognition, ghi log CloudWatch và ghi dữ liệu vào S3. Với việc sử dụng Amazon Rekognition, bạn sẽ có được những ưu điểm sau:\nDễ dàng nhận diện các đối tượng và khuôn mặt trong ảnh mà không cần xây dựng mô hình AI riêng. Hỗ trợ phân tích văn bản trong ảnh, giúp nhận diện thông tin và chữ viết trên hình ảnh. Có thể cấu hình và tích hợp với các dịch vụ AWS Serverless như Lambda, S3, và API Gateway, giúp triển khai nhanh chóng và tiết kiệm chi phí. Tự động hóa quy trình phân tích hình ảnh và video mà không cần phần cứng đắt tiền hoặc quản lý hạ tầng. Cung cấp các API dễ sử dụng cho việc nhận diện hình ảnh và video, giúp lập trình viên dễ dàng tích hợp vào ứng dụng Quản lý các quyền truy cập và bảo mật thông qua AWS IAM để đảm bảo tính bảo mật và tuân thủ chính sách của công ty. Log lại các hành động và phân tích kết quả để giúp người dùng dễ dàng theo dõi và kiểm tra hiệu quả của mô hình AI. Với những ưu điểm trên, bạn có thể sử dụng Amazon Rekognition và Serverless Stack để xây dựng các ứng dụng AI nhận diện hình ảnh thông minh, tiết kiệm thời gian và chi phí khi triển khai và bảo trì hệ thống.\n"
},
{
	"uri": "//localhost:1313/vi/",
	"title": "Intelligent Image Recognition",
	"tags": [],
	"description": "",
	"content": "AI Nhận Diện Ảnh Thông Minh với Amazon Rekognition và Serverless Stack Tổng quan Trong bài lab này, bạn sẽ tìm hiểu các khái niệm cơ bản và thực hành về Amazon Rekognition – một dịch vụ AI nhận diện ảnh mạnh mẽ, và cách triển khai giải pháp Serverless Stack. Bạn sẽ thực hành tạo các pipeline tự động để phân tích và nhận diện hình ảnh sử dụng Amazon Rekognition, đồng thời kết hợp với các dịch vụ Serverless như AWS Lambda, S3, và API Gateway để xây dựng một hệ thống xử lý ảnh thông minh.\nNội dung Giới thiệu Các bước chuẩn bị "
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/",
	"title": "Các bước chuẩn bị",
	"tags": [],
	"description": "",
	"content": "Tổng Quan Trước khi bắt đầu triển khai hệ thống AI nhận diện ảnh thông minh, bạn cần chuẩn bị một số thành phần cơ bản trong môi trường AWS để đảm bảo quá trình phân tích và lưu trữ diễn ra suôn sẻ. Cụ thể, bạn sẽ tạo một S3 Bucket để lưu trữ ảnh gốc mà người dùng tải lên, cũng như các tệp kết quả phân tích ở định dạng JSON. Tiếp theo, cần cấu hình một IAM Role với các quyền truy cập phù hợp như AmazonS3FullAccess, AmazonRekognitionFullAccess, CloudWatchLogsFullAccess\u0026hellip; để Lambda function có thể gọi dịch vụ Rekognition, ghi log vào CloudWatch và ghi dữ liệu vào S3\nNội dung Clone và Setup Front-End Tạo S3 Bucket Tạo IAM Role và Attach Policy "
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]