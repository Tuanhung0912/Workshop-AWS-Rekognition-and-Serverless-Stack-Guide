[
{
	"uri": "//localhost:1313/vi/3-lambdafunction/3.1-analyzefunction/",
	"title": "Cấu hình Analyze Function",
	"tags": [],
	"description": "",
	"content": "Cấu hình Analyze Function để thực hiện việc phân tích hình ảnh 1. Tìm kiếm và truy cập trang dịch vụ của Lambda\nTại thanh tìm kiếm, bạn hãy nhập: Lambda Kết quả hiển thị như hình ảnh bên dưới: Tại trang chính của dịch vụ lambda, bạn hãy tiến hành tạo mới một Function bằng cách bấm vào button Create a function như hình ảnh bên dưới: Tiếp theo, bạn sẽ được chuyển đến trang cấu hình cho Lambda Function như hình ảnh bên dưới: 2. Cấu hình cho Analyze Function tại trang Create a function\nTại trang tạo mới, để cấu hình cho function mà bạn sắp chuẩn bị phải tạo Thì bạn cần phải nhập thông tin và chọn các cấu hình phù hợp nhất cho bài lab, bạn hãy thực hiện theo các bước sau đây: Trong phần đầu tiên, sẽ có 3 mục để tạo trước template của Lambda Function: Author from scratch, Use a blueprint, Container image\nBạn hãy chọn Author from scratch, điều này sẽ tạo một cấu trúc đoạn code đơn giản có nội dung mẫu là in ra dòng chữ Hello World Trong phần Basic information:\nFunction name: nhập tên cho function. Ví dụ: AnalyzeImage (hoặc đặt tên tùy ý) Runtime: bạn hãy chọn Python 3.11 Architecture: bạn hãy chọn chuẩn x86_64 Trong phần Change default execution role:\nExcution role: bạn hãy chọn Use an existing role, điều này cho phép bạn chọn một Role đã tạo trước đó và phù hợp với Lambda Function Existing role: bạn hãy chọn LambdaAnalyzeRole, đây là Role mà phần trước đã tạo Sau khi đã cấu hình xong, bạn bấm vào button Create function để tiến hành tạo Lambda function Kết quả như hình ảnh bên dưới: Đợi vài giây để hệ thống tạo Lambda function mà bạn đã cấu hình Sau khi tạo xong thì hệ thống sẽ trả về thông báo tạo thành công Lambda function của bạn như hình ảnh bên dưới: Tại đây chính là phần mà bạn có thể thao tác các dòng lệnh code để lập trình bằng ngôn ngữ Python như đã cấu hình ở phần trước đó: 3. Cấu hình Code Analyze Function tại phần Code Source\nTại đây bạn sẽ tiến hành nhập code để chức năng phân tích ảnh có thể hoạt động Bạn hãy nhập code theo cấu trúc như sau: import json import boto3 import base64 # Khởi tạo client Rekognition để gọi dịch vụ nhận diện ảnh rekognition = boto3.client(\u0026#39;rekognition\u0026#39;) def lambda_handler(event, context): try: # Kiểm tra xem request body có tồn tại không if \u0026#39;body\u0026#39; not in event or not event[\u0026#39;body\u0026#39;]: return { \u0026#34;statusCode\u0026#34;: 400, \u0026#34;body\u0026#34;: json.dumps({\u0026#34;error\u0026#34;: \u0026#34;Empty request body\u0026#34;}) } # Lấy phần body từ sự kiện gửi vào (kiểm tra có phải là base64 không) body_str = event[\u0026#39;body\u0026#39;] if event.get(\u0026#34;isBase64Encoded\u0026#34;): # Nếu API Gateway cấu hình truyền base64 body_str = base64.b64decode(event[\u0026#39;body\u0026#39;]).decode(\u0026#39;utf-8\u0026#39;) # Chuyển chuỗi JSON thành dictionary Python body = json.loads(body_str) # Lấy dữ liệu ảnh dạng base64 từ trường \u0026#34;image\u0026#34; image_base64 = body.get(\u0026#39;image\u0026#39;) # Nếu không có ảnh thì trả về lỗi if not image_base64: return { \u0026#34;statusCode\u0026#34;: 400, \u0026#34;body\u0026#34;: json.dumps({\u0026#34;error\u0026#34;: \u0026#34;Missing \u0026#39;image\u0026#39; in request body\u0026#34;}) } # Giải mã ảnh từ base64 thành dạng bytes image_bytes = base64.b64decode(image_base64) # Gọi AWS Rekognition để nhận diện nhãn trong ảnh response = rekognition.detect_labels( Image={\u0026#39;Bytes\u0026#39;: image_bytes}, # Truyền ảnh dạng bytes MaxLabels=10, # Giới hạn tối đa 10 nhãn trả về MinConfidence=75 # Chỉ lấy nhãn có độ tin cậy từ 75% trở lên ) # Trả kết quả nhận diện về dưới dạng JSON return { \u0026#34;statusCode\u0026#34;: 200, \u0026#34;body\u0026#34;: json.dumps({ \u0026#34;labels\u0026#34;: response.get(\u0026#39;Labels\u0026#39;, []), \u0026#34;message\u0026#34;: \u0026#34;Image analyzed successfully\u0026#34; }), \u0026#34;headers\u0026#34;: { \u0026#34;Content-Type\u0026#34;: \u0026#34;application/json\u0026#34;, \u0026#34;Access-Control-Allow-Origin\u0026#34;: \u0026#34;*\u0026#34; # Cho phép gọi từ frontend } } except Exception as e: # Nếu có lỗi thì log ra và trả về mã lỗi 500 print(\u0026#34;Error:\u0026#34;, str(e)) return { \u0026#34;statusCode\u0026#34;: 500, \u0026#34;body\u0026#34;: json.dumps({\u0026#34;error\u0026#34;: str(e)}) } Sau khi nhập vào trong phần Code Source theo cấu trúc trên bạn có thể tiến hành lưu lại cách thay đổi bằng cách: Bấm button Deploy hoặc tổ hợp phím (Ctrl + Shift + U) Đợi một vài giây, hệ thống sẽ lưu lại tất cả các thay đổi của bạn và trả về thông báo lưu thành công Kết quả như các hình bên dưới: Bạn đã hoàn thành bước cấu hình Lambda Function cho chức năng Phân tích ảnh bằng cách gọi Client của AWS Rekognition\n"
},
{
	"uri": "//localhost:1313/vi/4-apigateway/4.1-analyzeimage/",
	"title": "Cấu hình API Analyze Image",
	"tags": [],
	"description": "",
	"content": "Cấu hình API GateWay cho chức năng Analyze Image để phân tích ảnh 1. Tìm kiếm và truy cập trang dịch vụ của API Gateway\nTại thanh tìm kiếm, bạn hãy nhập API Gateway Kết quả hiển thị như hình ảnh bên dưới: Tại trang chủ của dịch vụ API Gateway của AWS thì bạn có thể tạo mới một API bằng cách bấm vào button Create an API ở bên phải như hình ảnh bên dưới: 2. Cấu hình API Gateway cho chức năng Analyze Image\nTại trang thêm mới một API thì, bạn có thể thấy được rất nhiều lại API sử dụng cho từng mục đích khác nhau như: HTTP API, WebSocket API, REST API,\u0026hellip; Ở phần này, ta sẽ sử dụng HTTP API Trong phần Choose an API type:\nBạn hãy chọn HTTP API Bấm vào Button Build Kết quả như hình ảnh sau: Tiếp theo, sau khi thực hiện thao tác trước, bạn sẽ được chuyển đến trang cấu hình API gồm 4 bước như sau: Configure API, Configure routes, Define Stages, Review and Create. Tại đây, bạn sẽ tiến hành cấu hình API theo 4 bước trên để có thể Build được một API Gateway Trong phần Configure API:\nAPI name: bạn hãy đặt tên cho API. Ví dụ: AnalyzeImage IP address type: chọn IPv4 Trong phần Integration:\nTại đây chính là phần bạn sẽ kết nối một trong các dịch vụ vào API Chọn Add Integration Chọn dịch vụ Lambda AWS Region: bạn hãy chọn Region hiện tại. Ví dụ trong bài lab: ap-southeast-1 Lambda function: chọn function đã tạo ở phần trước, ở đây ta chọn AnalyzeImage Version: chọn 2.0 Sau khi cấu hình xong các bước trên, bạn bấm button Next Tiếp theo, ta sẽ được chuyển tới bước 2: Configure routes Tại trang này, ta sẽ cấu hình để API thực hiện chức năng phân tích ảnh bằng đường dẫn và một trong các phương thức của API như hình ảnh bên dưới: Trong phần Configure routes:\nMethod: chọn POST Resource path: bạn có thể tùy ý ghi đường dẫn API. Ví dụ: /AnalyzeImage Integration target: chọn AnalyzeImage Sau khi cấu hình các bước trên xong thì bấm button Next Trong phần Bước 3: Define stages\nTa sẽ để nguyên các giá trị mặc định của Stages Bạn có thể tùy ý muốn Deploy API bằng tay hoặc tự động mỗi khi có sự thay đổi Ở ví dụ này, mình sẽ để mặc định là Auto-deploy Sau khi cấu hình các bước trên xong thì bấm button Next Trong phần Bước 4: Review and create\nTại trang này, bạn sẽ kiểm tra lại toàn bộ các cấu hình ở 3 bước trước đó Nếu có gì sai xót thì bạn có thể bấm nút Edit ở mỗi phần Sau khi đã kiểm tra toàn bộ cấu hình của API thì bạn hãy bấm Create để tiến hành tạo API Đợi một lúc, thì hệ thống sẽ tạo thành công API của bạn và trả về thông báo tạo thành công như hình dưới đây: 3. Cấu hình CORS cho API để có thể giao tiếp với Front-End và đọc dữ liệu JSON\nỞ phía bên phải của Navigation Panel, trong phần Develop bạn hãy chọn CORS như hình ảnh bên dưới: Tại trang CORS, bạn có thể xem được các phần có thể cấu hình của CORS gồm các phần như: Access-Control-Allow-Origin, Access-Control-Allow-Headers, Access-Control-Allow-Methods, Access-Control-Expose-Headers, Access-Control-Max-Age, Access-Control-Allow-Credentials. Trong phần Configure CORS:\nBấm vào button ở góc phải: button Configure Access-Control-Allow-Origin: bạn hãy nhập dấu (*) để cho phép mọi domain có thể truy cập, nếu không muốn bạn có thể tùy chỉnh chính xác domain mà bạn muốn API giao tiếp Access-Control-Allow-Headers: bạn hãy nhập content-type để có thể đọc được đầu vào dưới dạng JSON Access-Control-Allow-Methods: bạn hãy chọn POST để phù hợp với routes đã cấu hình ở phần trước Còn lại ta sẽ để cấu hình mặc định của CORS Sau khi đã cấu hình toàn bộ các bước trên thì bấm button Save Lưu ý, đây là phần cấu hình bắt buộc phải có, nếu thiếu bước này, API sẽ không thể giao tiếp với Front-End\nBạn đã hoàn thành phần cấu hình API cho chức năng phân tích ảnh bằng AWS Rekognition\n"
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.1-clonefrontend/",
	"title": "Clone và Setup Front-End",
	"tags": [],
	"description": "",
	"content": "Clone Project từ Repository Github 1. Clone Project về bằng đường link của Repository Github\nTrước hết, bạn hãy tải và cài đặt môi trường run-time của Javascript để có thể triển khai dự án\nLink cài đặt tham khảo: node.js Sau đó, bạn hãy tải và cài đặt môi trường Code Editor phổ biến là Visual Studio Code hoặc các môi trường Code Editor tương đương khác\nLink cài đặt tham khảo: Visual Studio Code Tiếp theo, truy cập đường link github của project Bấm vào biểu tượng Code màu xanh lá và Copy đường link của Repository như trong hình bên dưới: Sau khi đã truy cập và copy đường link của Repository Bạn hãy mở Command Prompt tại thư mục bạn muốn chứa Project như sau Bạn hãy tiến hành Clone Project về thư mục mà bạn muốn chứa Project với cấu trúc như sau: git clone https://github.com/Tuanhung0912/Workshop-AWS-Rekognition-and-Serverless-Stack-Frontend.git Sau khi bạn đã Clone Project từ Repository về thì sẽ được kết quả như hình bên dưới: 2. Tiến hành mở Project và Setup\nSau khi đã Clone Project từ Repository về thành công Bây giờ, hãy tiến hành mở Project nhanh bằng Command Prompt như hình bên dưới: Sau khi nhập lệnh từ Command Prompt để mở project thì sẽ được kết quả như hình bên dưới: Tiếp theo, ta tiến hành tải các dependencies và thư viện cần thiết cho project chạy bằng môi trường run-time node.js Mở một Terminal trong Project và nhập câu lệnh với cấu trúc như sau: npm install Sau khi nhập lệnh như trên thì cần đợi 1-2 phút để tải và hoàn thành Sau khi tải xong các thư viện cần thiết thì trong Project xuất hiện thư mục node_modules như hình bên dưới: Tiếp theo, ta tiến hành cập nhật lại các thư viện cho Vite bằng câu lệnh với cấu trúc như sau: npm update vite Sau khi nhập câu lệnh như trên để update các thư viện cần thiết cho Vite thì được kết quả như hình bên dưới: 3. Triển khai Project\nTiếp theo, ta tiến hành nhập dòng lệnh với cấu trúc như sau để có thể triển khai trang web: npm run dev Sau khi chạy câu lệnh trên thì Terminal cho ra kết quả như sau: Truy cập địa chỉ http://localhost:5173/ để khởi chạy trang Web Cần chờ 1-2 phút để Project Build khi chạy lần đầu Sau khi chạy xong ta được kết quả hiển thị trang Web như hình bên dưới: Bạn đã hoàn thành bước chuẩn bị đầu tiên để Setup và khởi chạy trang web\n"
},
{
	"uri": "//localhost:1313/vi/1-introduce/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Amazon Rekognition là một dịch vụ AI mạnh mẽ của AWS, cung cấp khả năng nhận diện và phân tích hình ảnh và video. Amazon Rekognition giúp bạn nhận diện các đối tượng, khuôn mặt, văn bản, và các cảnh vật trong ảnh mà không cần phải xây dựng mô hình học sâu phức tạp. Dưới đây là mô hình triển khai của bài lab:\nTừng bước hoạt động của mô hình:\nBước 1: Người dùng tải ảnh từ giao diện web để thực hiện nhận diện ảnh. Bước 2: Frontend gửi ảnh thông qua HTTP POST đến API Gateway để bắt đầu xử lý. Bước 3: API Gateway kích hoạt hàm Lambda để xử lý yêu cầu phân tích ảnh. Bước 4: Lambda ghi log hoạt động (event, lỗi, thông tin nhận diện) vào CloudWatch để theo dõi và giám sát. Bước 5: Lambda gửi ảnh đến dịch vụ Rekognition để phân tích nội dung và trích xuất thông tin. Bước 6: Rekognition trả về kết quả phân tích (nhãn, đối tượng, độ tin cậy) dưới dạng JSON. Bước 7: Lambda tạo file JSON chứa kết quả và xử lý lại ảnh đầu vào. Bước 8: Cả ảnh gốc và file JSON sẽ được lưu vào S3 Bucket để lưu trữ lâu dài hoặc chia sẻ. Bước 9: Lambda được cấp quyền thông qua IAM Role để có thể gọi Rekognition, ghi log CloudWatch và ghi dữ liệu vào S3. Với việc sử dụng Amazon Rekognition, bạn sẽ có được những ưu điểm sau:\nDễ dàng nhận diện các đối tượng và khuôn mặt trong ảnh mà không cần xây dựng mô hình AI riêng. Hỗ trợ phân tích văn bản trong ảnh, giúp nhận diện thông tin và chữ viết trên hình ảnh. Có thể cấu hình và tích hợp với các dịch vụ AWS Serverless như Lambda, S3, và API Gateway, giúp triển khai nhanh chóng và tiết kiệm chi phí. Tự động hóa quy trình phân tích hình ảnh và video mà không cần phần cứng đắt tiền hoặc quản lý hạ tầng. Cung cấp các API dễ sử dụng cho việc nhận diện hình ảnh và video, giúp lập trình viên dễ dàng tích hợp vào ứng dụng Quản lý các quyền truy cập và bảo mật thông qua AWS IAM để đảm bảo tính bảo mật và tuân thủ chính sách của công ty. Log lại các hành động và phân tích kết quả để giúp người dùng dễ dàng theo dõi và kiểm tra hiệu quả của mô hình AI. Với những ưu điểm trên, bạn có thể sử dụng Amazon Rekognition và Serverless Stack để xây dựng các ứng dụng AI nhận diện hình ảnh thông minh, tiết kiệm thời gian và chi phí khi triển khai và bảo trì hệ thống.\n"
},
{
	"uri": "//localhost:1313/vi/",
	"title": "Intelligent Image Recognition",
	"tags": [],
	"description": "",
	"content": "AI Nhận Diện Ảnh Thông Minh với Amazon Rekognition và Serverless Stack Tổng quan Trong bài lab này, bạn sẽ tìm hiểu các khái niệm cơ bản và thực hành về Amazon Rekognition – một dịch vụ AI nhận diện ảnh mạnh mẽ, và cách triển khai giải pháp Serverless Stack. Bạn sẽ thực hành tạo các pipeline tự động để phân tích và nhận diện hình ảnh sử dụng Amazon Rekognition, đồng thời kết hợp với các dịch vụ Serverless như AWS Lambda, S3, và API Gateway để xây dựng một hệ thống xử lý ảnh thông minh.\nNội dung Giới thiệu Các bước chuẩn bị Cấu hình Lambda Function Cấu hình API Gateway Kết quả thực nghiệm "
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/",
	"title": "Các bước chuẩn bị",
	"tags": [],
	"description": "",
	"content": "Tổng Quan Trước khi bắt đầu triển khai hệ thống AI nhận diện ảnh thông minh, bạn cần chuẩn bị một số thành phần cơ bản trong môi trường AWS để đảm bảo quá trình phân tích và lưu trữ diễn ra suôn sẻ. Cụ thể, bạn sẽ tạo một S3 Bucket để lưu trữ ảnh gốc mà người dùng tải lên, cũng như các tệp kết quả phân tích ở định dạng JSON. Tiếp theo, cần cấu hình một IAM Role với các quyền truy cập phù hợp như AmazonS3FullAccess, AmazonRekognitionFullAccess, CloudWatchLogsFullAccess\u0026hellip; để Lambda function có thể gọi dịch vụ Rekognition, ghi log vào CloudWatch và ghi dữ liệu vào S3\nNội Dung Clone và Setup Front-End Tạo S3 Bucket để lưu trữ Tạo IAM Role và Attach Policy "
},
{
	"uri": "//localhost:1313/vi/4-apigateway/4.2-uploadimage/",
	"title": "Cấu hình API Upload Image",
	"tags": [],
	"description": "",
	"content": "Cấu hình API Gateway cho chức năng upload hình ảnh và kết quả phân tích lên S3 Bucket 1. Quay trở về trang APIs để xem danh sách các API hiện có\nSau khi đã cấu hình CORS cho API ở phần trước, bạn có thể quay trở lại trang danh sách APIs bằng cách: Ở phía bên trái Navigation Panel, chọn APIs Tại trang danh sách các API thì bạn có thể thấy được API AnalyzeImage đã tạo ở bước trước như hình ảnh ở bên dưới: Ở phía góc phải, bấm vào Create API 2. Cấu hình API Gateway cho chức năng Upload Image\nTại trang thêm mới một API thì, bạn có thể thấy được rất nhiều lại API sử dụng cho từng mục đích khác nhau như: HTTP API, WebSocket API, REST API,\u0026hellip; Ở phần này, ta sẽ sử dụng HTTP API Trong phần Choose an API type:\nBạn hãy chọn HTTP API Bấm vào Button Build Kết quả như hình ảnh sau: Tiếp theo, sau khi thực hiện thao tác trước, bạn sẽ được chuyển đến trang cấu hình API gồm 4 bước như sau: Configure API, Configure routes, Define Stages, Review and Create. Tại đây, bạn sẽ tiến hành cấu hình API theo 4 bước trên để có thể Build được một API Gateway Trong phần Configure API:\nAPI name: bạn hãy đặt tên cho API. Ví dụ: UploadImage IP address type: chọn IPv4 Trong phần Integration:\nTại đây chính là phần bạn sẽ kết nối một trong các dịch vụ vào API Chọn Add Integration Chọn dịch vụ Lambda AWS Region: bạn hãy chọn Region hiện tại. Ví dụ trong bài lab: ap-southeast-1 Lambda function: chọn function đã tạo ở phần trước, ở đây ta chọn UploadImage Version: chọn 2.0 Sau khi cấu hình xong các bước trên, bạn bấm button Next Tiếp theo, ta sẽ được chuyển tới bước 2: Configure routes Tại trang này, ta sẽ cấu hình để API thực hiện chức năng phân tích ảnh bằng đường dẫn và một trong các phương thức của API như hình ảnh bên dưới: Trong phần Configure routes:\nMethod: chọn POST Resource path: bạn có thể tùy ý ghi đường dẫn API. Ví dụ: /UploadImage Integration target: chọn UploadImage Sau khi cấu hình các bước trên xong thì bấm button Next Trong phần Bước 3: Define stages\nTa sẽ để nguyên các giá trị mặc định của Stages Bạn có thể tùy ý muốn Deploy API bằng tay hoặc tự động mỗi khi có sự thay đổi Ở ví dụ này, mình sẽ để mặc định là Auto-deploy Sau khi cấu hình các bước trên xong thì bấm button Next Trong phần Bước 4: Review and create\nTại trang này, bạn sẽ kiểm tra lại toàn bộ các cấu hình ở 3 bước trước đó Nếu có gì sai xót thì bạn có thể bấm nút Edit ở mỗi phần Sau khi đã kiểm tra toàn bộ cấu hình của API thì bạn hãy bấm Create để tiến hành tạo API Đợi một lúc, thì hệ thống sẽ tạo thành công API của bạn và trả về thông báo tạo thành công như hình dưới đây: 3. Cấu hình CORS cho API để có thể giao tiếp với Front-End và đọc dữ liệu JSON\nỞ phía bên phải của Navigation Panel, trong phần Develop bạn hãy chọn CORS như hình ảnh bên dưới: Tại trang CORS, bạn có thể xem được các phần có thể cấu hình của CORS gồm các phần như: Access-Control-Allow-Origin, Access-Control-Allow-Headers, Access-Control-Allow-Methods, Access-Control-Expose-Headers, Access-Control-Max-Age, Access-Control-Allow-Credentials. Bấm vào button ở góc phải: button Configure Trong phần Configure CORS:\nAccess-Control-Allow-Origin: bạn hãy nhập dấu (*) để cho phép mọi domain có thể truy cập, nếu không muốn bạn có thể tùy chỉnh chính xác domain mà bạn muốn API giao tiếp Access-Control-Allow-Headers: bạn hãy nhập content-type để có thể đọc được đầu vào dưới dạng JSON Access-Control-Allow-Methods: bạn hãy chọn POST để phù hợp với routes đã cấu hình ở phần trước Còn lại ta sẽ để cấu hình mặc định của CORS Sau khi đã cấu hình toàn bộ các bước trên thì bấm button Save Lưu ý, đây là phần cấu hình bắt buộc phải có, nếu thiếu bước này, API sẽ không thể giao tiếp với Front-End\nBạn đã hoàn thành phần cấu hình API để thực hiện chức năng Upload hình ảnh và kết quả phân tích lên S3 Bucket\n"
},
{
	"uri": "//localhost:1313/vi/3-lambdafunction/3.2-uploadfunction/",
	"title": "Cấu hình Upload Function",
	"tags": [],
	"description": "",
	"content": "Cấu hình Upload Function để thực hiện việc upload hình ảnh và kết quả phân tích ảnh 1. Tìm đến trang danh sách chứa các Lambda function\nỞ phần trước khi đã cấu hình cho Analyze Function thì bạn có thể trở lại danh sách chứa các Lambda Function hiện có nhanh bằng cách như sau: Bạn hãy nhìn lên góc trái phía trên thì sẽ có mục Functions Kết quả như hình sau: Tại trang hiện thị tất cả các Function hiện có, ta có thể thấy được Analyze Function mà bạn đã cấu hình ở phần trước Tiếp theo, bạn hãy bấm vào button Create function nằm ở góc bên phải để tiến hành tạo thêm một function mới như hình ảnh ở dưới: 3. Cấu hình cho Upload Function tại trang Create function\nTại trang tạo mới, để cấu hình cho function mà bạn sắp chuẩn bị phải tạo Thì bạn cần phải nhập thông tin và chọn các cấu hình phù hợp nhất cho bài lab, bạn hãy thực hiện theo các bước sau đây: Trong phần đầu tiên, sẽ có 3 mục để tạo trước template của Lambda Function: Author from scratch, Use a blueprint, Container image\nBạn hãy chọn Author from scratch, điều này sẽ tạo một cấu trúc đoạn code đơn giản có nội dung mẫu là in ra dòng chữ Hello World Trong phần Basic information:\nFunction name: nhập tên cho function. Ví dụ: UploadImage (hoặc đặt tên tùy ý) Runtime: bạn hãy chọn Python 3.11 Architecture: bạn hãy chọn chuẩn x86_64 Trong phần Change default execution role:\nExcution role: bạn hãy chọn Use an existing role, điều này cho phép bạn chọn một Role đã tạo trước đó và phù hợp với Lambda Function Existing role: bạn hãy chọn LambdaAnalyzeRole, đây là Role mà phần trước đã tạo Sau khi đã cấu hình xong, bạn bấm vào button Create function để tiến hành tạo Lambda function Kết quả như hình ảnh bên dưới: Đợi vài giây để hệ thống tạo Lambda function mà bạn đã cấu hình Sau khi tạo xong thì hệ thống sẽ trả về thông báo tạo thành công Lambda function của bạn như hình ảnh bên dưới: Tại đây chính là phần mà bạn có thể thao tác các dòng lệnh code để lập trình bằng ngôn ngữ Python như đã cấu hình ở phần trước đó: 3. Cấu hình Code Upload Function tại phần Code Source\nTại đây bạn sẽ tiến hành nhập code để chức năng upload hình ảnh và kết quả phân tích có thể hoạt động Bạn hãy nhập code theo cấu trúc như sau: import json import boto3 import base64 import uuid import os # Khởi tạo client S3 s3 = boto3.client(\u0026#39;s3\u0026#39;) # Lấy tên bucket từ biến môi trường (thay thế bằng tên bucket của bạn) BUCKET = os.environ.get(\u0026#34;BUCKET_NAME\u0026#34;, \u0026#34;your-bucket-name\u0026#34;) def lambda_handler(event, context): try: # Parse nội dung body từ HTTP request (định dạng JSON) body = json.loads(event[\u0026#34;body\u0026#34;]) # Lấy dữ liệu ảnh (base64) và kết quả phân tích từ frontend gửi lên image_base64 = body.get(\u0026#34;image\u0026#34;) result_data = body.get(\u0026#34;result\u0026#34;) # Kiểm tra nếu thiếu ảnh hoặc kết quả thì trả lỗi if not image_base64 or not result_data: return { \u0026#34;statusCode\u0026#34;: 400, \u0026#34;body\u0026#34;: json.dumps({\u0026#34;error\u0026#34;: \u0026#34;Missing image or result\u0026#34;}) } # Giải mã ảnh base64 thành dạng bytes image_bytes = base64.b64decode(image_base64) # Tạo tên file ảnh ngẫu nhiên bằng UUID filename = f\u0026#34;image-{uuid.uuid4()}.jpg\u0026#34; # Upload ảnh gốc lên thư mục \u0026#39;images/\u0026#39; trong bucket S3 s3.put_object( Bucket=BUCKET, Key=f\u0026#34;images/{filename}\u0026#34;, Body=image_bytes, ContentType=\u0026#34;image/jpeg\u0026#34; ) # Tạo tên file JSON tương ứng và upload kết quả phân tích vào thư mục \u0026#39;results/\u0026#39; s3.put_object( Bucket=BUCKET, Key=f\u0026#34;results/{filename.replace(\u0026#39;.jpg\u0026#39;, \u0026#39;.json\u0026#39;)}\u0026#34;, Body=json.dumps(result_data), ContentType=\u0026#34;application/json\u0026#34; ) # Trả kết quả thành công về cho frontend, bao gồm link ảnh và file JSON return { \u0026#34;statusCode\u0026#34;: 200, \u0026#34;body\u0026#34;: json.dumps({ \u0026#34;message\u0026#34;: \u0026#34;Upload thành công\u0026#34;, \u0026#34;imageUrl\u0026#34;: f\u0026#34;https://{BUCKET}.s3.amazonaws.com/images/{filename}\u0026#34;, \u0026#34;resultUrl\u0026#34;: f\u0026#34;https://{BUCKET}.s3.amazonaws.com/results/{filename.replace(\u0026#39;.jpg\u0026#39;, \u0026#39;.json\u0026#39;)}\u0026#34; }), \u0026#34;headers\u0026#34;: { \u0026#34;Access-Control-Allow-Origin\u0026#34;: \u0026#34;*\u0026#34;, # Cho phép truy cập từ mọi domain \u0026#34;Content-Type\u0026#34;: \u0026#34;application/json\u0026#34; } } except Exception as e: # Trả lỗi 500 nếu có exception xảy ra và cho phép CORS return { \u0026#34;statusCode\u0026#34;: 500, \u0026#34;body\u0026#34;: json.dumps({\u0026#34;error\u0026#34;: str(e)}), \u0026#34;headers\u0026#34;: {\u0026#34;Access-Control-Allow-Origin\u0026#34;: \u0026#34;*\u0026#34;} } Sau khi nhập vào trong phần Code Source theo cấu trúc trên bạn có thể tiến hành lưu lại cách thay đổi bằng cách: Bấm button Deploy hoặc tổ hợp phím (Ctrl + Shift + U) Đợi một vài giây, hệ thống sẽ lưu lại tất cả các thay đổi của bạn và trả về thông báo lưu thành công Lưu ý, bạn hãy thay thế tên bucket của mình, không được để trùng lặp tên bucket\nKết quả như các hình bên dưới: Bạn đã hoàn thành bước cấu hình Lambda Function cho chức năng upload hình ảnh và kết quả phân tích lên S3 Bucket\n"
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.2-creates3bucket/",
	"title": "Tạo S3 Bucket để lưu trữ",
	"tags": [],
	"description": "",
	"content": "Khởi tạo S3 Bucket dùng để lưu trữ hình ảnh và kết quả phân tích 1. Truy cập vào Console và tìm dịch vụ Amazon S3\nTruy cập vào trang AWS Management Console Sau đó, tiến hành đăng nhập tài khoản của bạn theo hình bên dưới: Sau khi bấm vào trang thì sẽ hiển thị trang đăng nhập với các trường thông tin cần nhập như hình bên dưới: Lưu ý, đây là điều kiện bắt buộc để có thể làm các bước tiếp theo, nếu bạn chưa có tài khoản hãy tiến hành đăng ký tài khoản\nLink tham khảo cách tạo tài khoản: Tạo tài khoản\nSau khi đã đăng nhập tài khoản thành công thì sẽ chuyển người dùng đến trang chính của AWS Manage Console như hình bên dưới:\nTại thanh tìm kiếm, hãy nhập S3 Chọn vào dịch vụ S3 Kết quả như hình bên dưới: Bạn có thể đánh dấu sao cho dịch vụ mà bạn sử dụng thường xuyên trong suốt quá trình làm, từ đó giúp bạn thuận tiện hơn trong việc truy cập nhanh chóng\nTại giao diện chính của dịch vụ S3, bạn hãy bấm vào nút Create Bucket như hình bên dưới: 2. Cấu hình cho S3 Bucket\nSau khi bấm vào Create Bucket thì sẽ chuyển đến phần khởi tạo Bucket như hình bên dưới: Tại phần General configuration:\nAWS Region: Asia Pacific (Singapore) ap-southeast-1 (hoặc tùy theo Region của bạn muốn sử dụng) Bucket type: chọn General purpose Bucket name: nhập rekognition-image-upload-0912 Tại phần Object Ownership:\nChọn ACLs disable (recommended) Lưu ý, Bucket Name của bạn phải là duy nhất và không trùng lặp với các Bucket khác\nTại phần Block Public Access setting for this bucket:\nBỏ chọn Block all public access Bỏ chọn Block public access to buckets and objects granted through new access control lists (ACLs) Bỏ chọn Block public access to buckets and objects granted through any access control lists (ACLs) Bỏ chọn Block public access to buckets and objects granted through new public bucket or access point policies Bỏ chọn Block public and cross-account access to buckets and objects through any public bucket or access point policies Tích chọn I acknowledge that the current settings might result in this bucket and the objects within becoming public. Tại phần Bucket Versioning:\nBucket Versioning: chọn Disable Tại phần Default Encryption:\nEncryption type: chọn Server-side encryption with Amazon S3 manage keys (SSE-S3) Bucket key: chọn Enable Sau khi đã hoàn thành các bước trên, cuộn xuống cuối trang và bấm Create Bucket như hình bên dưới: Đợi vài giây, bạn sẽ được chuyển đến trang danh sách bucket và hiển thị thông báo tạo thành công bucket như hình bên dưới: Bạn đã hoàn thành bước tạo S3 Bucket để lưu trữ hình ảnh và kết quả phân tích\n"
},
{
	"uri": "//localhost:1313/vi/3-lambdafunction/",
	"title": "Cấu hình Lambda Funtion",
	"tags": [],
	"description": "",
	"content": "Tổng Quan Trong phần này, bạn sẽ tiến hành cấu hình AWS Lambda Function – một thành phần cốt lõi trong hệ thống AI nhận diện ảnh thông minh. Lambda sẽ đóng vai trò xử lý trung gian: nhận ảnh từ phía người dùng thông qua API Gateway, gửi ảnh đến dịch vụ Amazon Rekognition để phân tích nội dung, xử lý kết quả và lưu trữ thông tin phân tích dưới dạng JSON trong S3. Ngoài ra, Lambda cũng sẽ ghi log toàn bộ quá trình hoạt động vào CloudWatch để phục vụ mục đích giám sát và khắc phục lỗi. Việc cấu hình đúng Lambda function là bước quan trọng để đảm bảo hệ thống hoạt động chính xác, bảo mật và mở rộng linh hoạt theo mô hình Serverless.\nNội Dung Cấu hình Analyze Function Cấu hình Upload Function "
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.3-createiamrole/",
	"title": "Tạo IAM Role và Attach Policy",
	"tags": [],
	"description": "",
	"content": "Tạo IAM Role mới và Attach Policy vào cho Role 1. Tìm kiếm và truy cập dịch vụ IAM để tạo Role\nTại thanh tìm kiếm, nhập vào IAM Sau khi tìm kiếm, bấm vào dịch vụ IAM như hình bên dưới: Tại trang dịch vụ của IAM, ở bên trái Navigation Panel Chọn Roles như hình bên dưới: Tại trang Role, ta có thể thấy được danh sách nhiều Role phổ biến và hay sử dụng của AWS Ở phía bên phải, bạn hãy bấm button Create Role như sau: 2. Tạo mới Role và cấu hình chi tiết\nTại trang tạo mới Role, ta có thể nhìn thấy khi tạo Role khi cần trải qua 3 bước chính như hình bên dưới: Tại phần Select Trusted entity:\nTrusted entity type: Chọn AWS Service Tại phần Use Case:\nService or use case: chọn Lambda Sau đó bấm button Next Tại trang thực hiện bước 2 Add permissions cho Role, bạn có thể thấy được hơn 1000+ Permission Policy như hình bên dưới: Tuy nhiên, bạn chỉ cần tìm một vài Policy phù hợp với bài Lab Ở đây, ta sẽ tìm kiếm và chọn 3 Policy cần sử dụng như sau: AmazonS3FullAccess, AmazonRekognitionFullAccess, CloudWatchLogsFullAccess. Sau khi đã chọn xong, bạn hãy bấm button Next Kết quả như các hình bên dưới: Tại trang thực hiện bước 3: Name, review, and create, Bạn sẽ xem lại toàn bộ cấu hình của cả hai bước trên Tại phần Role details:\nRole name: ta sẽ đặt tên cho Role, Ví dụ: LambdaAnalyzeRole Description: bạn có thể để mặc định hoặc ghi chú tùy ý Ở phần Step 2: Add Permission, bạn có thể xem lại các Policy đã thêm vào trước đó một cách chi tiết Sau khi đã kiểm tra toàn bộ các thông tin thì bạn bấm Create Role để tiến hành tạo Role Đợi vài giây, sau khi tạo xong hệ thống sẽ chuyển bạn về trang chủ của phần Role và hiển thị thông báo tạo thành công như hình bên dưới: Bạn đã hoàn thành các bước chuẩn bị cần thiết để có thể làm bước tiếp theo\n"
},
{
	"uri": "//localhost:1313/vi/4-apigateway/",
	"title": "Cấu hình API Gateway",
	"tags": [],
	"description": "",
	"content": "Tổng Quan Trong phần này, bạn sẽ tiến hành cấu hình Amazon API Gateway – thành phần đóng vai trò cầu nối giữa giao diện người dùng (frontend) và backend serverless (AWS Lambda). API Gateway sẽ tiếp nhận các yêu cầu HTTP từ ứng dụng web (chẳng hạn như khi người dùng tải ảnh lên), sau đó chuyển tiếp các yêu cầu này đến Lambda function để xử lý. Việc cấu hình đúng API Gateway giúp đảm bảo hệ thống có thể giao tiếp ổn định, bảo mật và mở rộng linh hoạt. Đồng thời, bạn cũng sẽ cấu hình CORS (Cross-Origin Resource Sharing) để cho phép ứng dụng web truy cập tài nguyên API một cách hợp lệ, đặc biệt khi frontend và backend được triển khai trên các miền khác nhau. Đây là bước quan trọng giúp hoàn thiện quy trình giao tiếp giữa frontend React và các dịch vụ AWS phía sau.\nNội Dung Cấu hình API Analyze Image Cấu hình API Upload Image "
},
{
	"uri": "//localhost:1313/vi/5-results/",
	"title": "Kết quả thực nghiệm",
	"tags": [],
	"description": "",
	"content": "Kiểm tra và thực hiện kết quả của ứng dụng trên cả hai chức năng Trong phần này, bạn sẽ tiến hành triển khai ứng dụng với toàn bộ các thành phần đã được cấu hình, bao gồm API Gateway, Lambda function và S3 Bucket. Bạn sẽ kết nối giao diện người dùng (frontend) với backend serverless để xử lý các yêu cầu phân tích ảnh. Quá trình này bắt đầu khi người dùng tải ảnh lên thông qua giao diện web, và ứng dụng sẽ gửi ảnh đến API Gateway, nơi yêu cầu được chuyển tới Lambda function để thực hiện nhận diện ảnh với Amazon Rekognition. Sau khi nhận diện, kết quả sẽ được lưu trữ trong S3 Bucket và trả về cho người dùng dưới dạng liên kết để dễ dàng truy cập.\n1. Lưu lại đường link Endpoint và Routes của APIs\nỞ phần trước, sau khi đã tạo và cấu hình 2 API là: AnalyzeImage và UploadImage Trong phần này ta cần lưu lại 2 đường link Endpoint và Routes Ở bên trái Navigation Panel, bạn hãy chọn vào mục như trong hình dưới đây: Tại trang này, sẽ hiển thị toàn bộ thông tin chi tiết của API này Trong phần API details, ở góc bên phải có phần Default Endpoint Ở đây sẽ hiển thị đường link Invoke URL của API, và cả trạng thái hoạt động của API Bạn sẽ copy đường link Endpoint này như trong hình bên dưới: Lưu ý, đây là Endpoint API ngẫu nhiên, mỗi API sẽ có đường link khác nhau, vì vậy hãy thay thế bằng đường link API của bạn\n2. Thay thế đường link Endpoint và Routes của API AnalyzeImage\nQuay trở lại Project Front-End ở phần 1 Tìm thư mục và file cấu hình theo đường dẫn: src/App.jsx Tiếp theo, ta sẽ tìm đến hàm handleAnalyzeImage Ở hàm này, bạn sẽ thay thế đường link API vừa Copy ở bước trước Kết quả như các hình dưới đây: Kế tiếp, ta sẽ tìm đến routes của API đã cấu hình ở phần trước Và copy routes của method POST với path là /AnalyzeImage Kết quả như các hình dưới đây: Tiếp theo, ta dán vào đuôi của Endpoint API trong code và lưu lại như sau: 3. Thay thế đường link Endpoint và Routes của API UploadImage\nQuay trở lại Project Front-End ở phần 1 Tìm thư mục và file cấu hình theo đường dẫn: src/App.jsx Tiếp theo, ta sẽ tìm đến API của UploadImage trên trang hệ thống Và sau đó copy lại EndPoint của API UploadImage Kết quả như hình dưới đây: Tiếp theo, ta sẽ tìm đến hàm handleUploadToS3\nỞ hàm này, bạn sẽ thay thế đường link API vừa Copy ở bước trước\nKết quả như các hình dưới đây:\nKế tiếp, ta sẽ tìm đến routes của API đã cấu hình ở phần trước Và copy routes của method POST với path là /UploadImage Kết quả như các hình dưới đây: Tiếp theo, ta dán vào đuôi của Endpoint API trong code và lưu lại như sau: 4. Kiểm tra kết quả\nỞ trong Project, dưới cửa sổ terminal Bạn hãy nhập cấu trúc câu lệnh sau để chạy trang Web: npm run dev Đợi vài giây, code sẽ chạy và sẽ hiển thị đường link để truy cập trang web Bạn có thể di chuột vào đường link trong Terminal và bấm tổ hợp: Ctrl + Click chuột trái Hoặc truy cập địa chỉ http://localhost:5173/ để truy cập trang web Tại trang web, sẽ có phần để bạn có thể Drop một bức ảnh hoặc chọn bức ảnh từ máy tính cá nhân như sau: Sau khi tải một ảnh bất kì từ máy tính cá nhân của bạn Ta có thể thấy được trang web sẽ có thể thực hiện 2 chức năng như sau: AnalyzeImage, Upload To S3 Ta sẽ thực hiện theo từng bước đã được đánh số trên ảnh như sau: Chức năng Analyze Image (Phân tích ảnh):\nSau khi đã tải ảnh lên thành công Bấm button Analyze Image để thực hiện chức năng Đợi một lúc, khi đó trang web sẽ hiển thị kết quả phân tích bên Component Result Kết quả hiển thị như hình ảnh ở bên dưới: Bạn có thể xem chi tiết JSON Script mà kết quả phân tích ảnh của AWS Rekognition trả về với các thông tin như Label, Name, Confidence,\u0026hellip; Và kết quả sẽ lấy là tối đa 10 nhãn, độ tin cậy trên 75% Labels: nhãn Name: Tên của object Confidence: Độ tin cậy Categories: Danh mục Kết quả hiện thị chi tiết như hình bên dưới: Chức năng Upload Image (Tải ảnh cùng với kết quả phân tích lên S3):\nSau khi đã thực hiện chức năng phân tích ảnh Tiếp theo, bạn sẽ thực hiện chức năng tải ảnh lên S3 Bucket bằng bấm vào Button Upload To S3 Đợi một lúc, khi đã tải ảnh và kết quả lên S3 Bucket thành công thì hệ thống sẽ trả về thông báo thành công như hình bên dưới: Ta sẽ kiểm tra S3 Bucket xem ảnh và kết quả phân tích đã thực sự được tải lên chưa như sau: Truy cập S3 Bucket và bấm vào tên Bucket của bạn Kết quả hiển thị như các hình ảnh dưới đây: Ta có thể thấy rằng, S3 Bucket sẽ tự động tạo 2 Folder là: images và results Sau khi kiểm tra thì, bạn có thể thấy rằng sẽ có 1 ảnh và 1 file JSON nằm ở thư mục tương ứng như sau: Chúc mừng bạn đã hoàn thành phần thực nghiệm kết quả, qua đó có thể tham khảo được một trong nhiều cách để có thể tận dụng tối đa sức mạnh của các dịch vụ AWS được triển khai trong bài lab này.\n"
},
{
	"uri": "//localhost:1313/vi/6-cloudwatch/",
	"title": "Xem Logs hoạt động bằng CloudWatch",
	"tags": [],
	"description": "",
	"content": "Kiểm Tra Logs hoạt động của trang Web bằng CloudWatch 1. Tìm kiếm và truy cập trang dịch vụ của CloudWatch\nTrên thanh tìm kiếm, bạn hãy nhập: CloudWatch Kết quả hiển thị như hình ảnh bên dưới: Tại trang chủ chính của dịch vụ CloudWatch Ở phía bên trái Navigation Panel, bạn hãy chọn Log groups Kết quả hiển thị như hình ảnh bên dưới: 2. Kiểm tra và xem Logs hoạt động\nTại trang chính của Log groups Ta có thể thấy được, có 2 Log group được tạo tự động, sau khi chúng ta thực hiện chức năng Analyze Image và Upload Image ở phần trước Đây chính là phần chúng ta có thể kiểm tra chức năng hoạt động ra sao Chọn vào Log group chức năng Analyze Image Trong trang chi tiết Log group của chức năng Analyze Image Ta có thể thấy được các thông tin chi tiết khác Đặc biệt là Log Streams, đây chính là các luồng hoạt động chính mỗi khi ta thực hiện chức năng, mỗi lần thực hiện chức năng sẽ thêm một Log Streams để ghi lại hoạt động chi tiết của lần thực hiện chức năng đó Đây là chi tiết luồng hoạt động chức năng Log Streams: Ta sẽ thử thực hiện một ví dụ minh họa khi mà thực hiện chức năng Analyze Image bị lỗi và xem kết quả Log Streams Đầu tiên, vào Lambda Function của chức năng Analyze Image Sau đó tiến hành sửa nội dung một đoạn code bất kì như sau: Giải thích: ta sẽ sửa dòng code như hình trên để lambda function không thể gọi được client của dịch vụ AWS Rekognition khi đó hệ thống sẽ báo lỗi trên Front-End vì không thể thực hiện được chức năng phân tích hình ảnh và ghi lại Log Streams bị lỗi như các hình ảnh sau: Qua phần này, các bạn có thể hiểu sở về cách hoạt động của Log groups trong CloudWatch là như thế nào, dịch vụ này sẽ giúp các bạn thuận tiện hơn khi theo dõi hoạt động của ứng dụng và dễ dàng có thể hiển thị toàn bộ thông tin lỗi, từ đó có thể dễ dàng Debug hơn.\n"
},
{
	"uri": "//localhost:1313/vi/7-s3policy/",
	"title": "Cập nhật Policy cho S3 Bucket (Tùy chọn)",
	"tags": [],
	"description": "",
	"content": "Cập nhật cấu hình Policy cho S3 Bucket để có thể xem thông tin ảnh và kết quả phân tích Lưu ý, đây là phần cấu hình cho Policy của S3 Bucket, để có thể xem trực tiếp ảnh và kết quả phân tích hình ảnh thông qua URL công khai, bạn có thể xem để tham khảo thêm\n1. Truy cập trang chi tiết thông tin phần S3 Bucket Policy\nỞ phần 5, chúng ta đã có thể thực hiện chức năng phân tích hình ảnh và Upload hình ảnh lên S3 Bucket Tuy nhiên việc xem ảnh và kết quả sẽ bị từ chối vì chưa cài đặt Policy cho S3 bucket Đầu tiên, ta bấm vào hình ảnh như sau: Sau đó, hệ thống sẽ chuyển người dùng đến trang xem thông tin chi tiết của Object đó Tại trang thông tin chi tiết của Object (hình ảnh), nhìn sang góc bên phải ta sẽ thấy một mục Object URL Đây chính là URL của Object, bạn có thể click chuột hoặc copy ra một tab trình duyệt mới để xem: Kết quả hiển thị như các hình ảnh bên dưới: Sau khi truy cập đường link URL của Object, ta có thể thấy được hệ thống báo Access Denied và không hiển thị được hình ảnh 2. Cấu hình cho S3 Bucket Policy để xem ảnh và kết quả phân tích\nQuay trở lại trang danh sách Bucket, bấm vào tên Bucket Tại đây, bạn sẽ chuyển sang tab Permission như hình sau: Tại trang thông tin của tab Permission Lăn chuột xuống một đoạn Bạn sẽ thấy được phần Bucket policy, nhìn qua bên phải bấm button Edit Điều này cho phép bạn chỉnh sửa policy của Bucket Sau khi chuyển đến phần Edit Bucket Policy, bạn có thể thấy được phần chúng ta sẽ chỉnh sửa là thêm vào một đoạn JSON Script như hình ảnh bên dưới: Tại đây, bạn sẽ tiến hành cấu hình cho Bucket policy bằng đoạn mã JSON Bạn sẽ nhập đoạn cấu hình với cấu trúc như sau: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, // Phiên bản của policy, theo chuẩn của AWS IAM \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;AllowPublicReadAccessToImagesAndResultFolders\u0026#34;, // Mã định danh cho policy statement (có thể thay đổi để dễ nhận diện) \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, // Chỉ định hành động \u0026#34;Allow\u0026#34; (cho phép) đối với các hành động được mô tả dưới đây \u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;, // Chỉ định rằng tất cả người dùng (Public Access) đều có thể thực hiện hành động này \u0026#34;Action\u0026#34;: \u0026#34;s3:GetObject\u0026#34;, // Cấp quyền thực hiện hành động \u0026#34;s3:GetObject\u0026#34;, tức là cho phép người dùng đọc (GET) đối tượng từ S3 \u0026#34;Resource\u0026#34;: [ // Cấp quyền cho các tài nguyên cụ thể dưới đây \u0026#34;arn:aws:s3:::your-bucket-name/images/*\u0026#34;, // Cho phép truy cập đối với các đối tượng trong thư mục \u0026#34;images\u0026#34; của bucket \u0026#34;arn:aws:s3:::your-bucket-name/results/*\u0026#34; // Cho phép truy cập đối với các đối tượng trong thư mục \u0026#34;results\u0026#34; của bucket ] } ] } Lưu ý, hãy thay thế bằng tên S3 Bucket của bạn\nSau khi cấu hình như đoạn mã trên, ta sẽ có kết quả như hình bên dưới Ta tiến hành lưu thay đổi bằng cách bấm vào Button Save changes Đợi một vài giây, hệ thống xử lý và sẽ trả về thông báo thành công cùng với phần Bucket policy đã được cập nhật trên trang web như sau: Quay trở lại trang hiện thị thông tin chi tiết của Object Truy cập đường link URL của Object Kết quả sẽ hiển thị như các hình ảnh bên dưới: Tại đây, ta đã có thể xem được hình ảnh trực tiếp thông qua URL công khai của object như hình ảnh dưới đây: Tương tự, trong phần Edit Policy của Bucket ta cũng đã đồng thời cấu hình cho thư mục /result để có thể xem được kết quả phân tích hình ảnh như hình ảnh bên dưới: Qua phần này, bạn có thể tham khảo thêm cách làm sao để chúng ta có thể xem được hình ảnh và kết quả phân tích một cách trực tiếp nhanh chóng hơn.\n"
},
{
	"uri": "//localhost:1313/vi/8-demo/",
	"title": "Video Demo tham khảo",
	"tags": [],
	"description": "",
	"content": "Video Demo tham khảo cho toàn bộ bài lab Trong phần Video Demo tham khảo, bạn sẽ được trải nghiệm trực quan toàn bộ quy trình triển khai hệ thống nhận diện ảnh thông minh với Amazon Rekognition và Serverless Stack. Video sẽ hướng dẫn bạn từng bước, từ việc cấu hình các dịch vụ AWS như Lambda, API Gateway, S3 cho đến việc xử lý ảnh: tải ảnh lên hệ thống, phân tích ảnh qua Rekognition, và lưu trữ kết quả phân tích vào S3. Qua video, bạn sẽ thấy rõ cách các thành phần này kết nối và tương tác với nhau trong thực tế, giúp bạn dễ dàng hình dung và nắm bắt quy trình, đồng thời cung cấp những mẹo và kỹ thuật để áp dụng vào dự án của mình.\nLink Demo tham khảo: Tại đây "
},
{
	"uri": "//localhost:1313/vi/9-cleanup/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "Dọn dẹp tài nguyên dịch vụ sau khi sử dụng 1. Dọn dẹp dịch vụ IAM\nTại thanh tìm kiếm, nhập IAM Tại trang dịch vụ IAM, bên trái thanh Navigation Panel chọn Role Tại trang Roles, tìm kiếm LambdaAnalyzeRole, tích chọn LambdaAnalyzeRole Bấm button Delete, nhập tên Role: LambdaAnalyzeRole 2. Dọn dẹp dịch vụ S3\nTại thanh tìm kiếm, nhập S3 Tại trang General purpose buckets, chọn bucket muốn xóa Bấm button Empty để xóa toàn bộ Object của bucket trước khi xóa Bucket Nhập permanently delete và bấm Empty để xóa Object Quay trở lại, chọn bucket muốn xóa, bấm Delete Nhập tên bucket của bạn, bấm Delete Bucket 3. Dọn dẹp dịch vụ Lambda\nTại thanh tìm kiếm, nhập Lambda Tích chọn các function muốn xóa, bấm vào button Action, chọn Delete Nhập confirm và bấm Delete 4. Dọn dẹp dịch vụ CloudWatch\nTại thanh tìm kiếm, nhập CloudWatch Tại trang chính CloudWatch, bên trái Navigation Panel chọn Log groups Chọn Log group muốn xóa, bấm vào Action, chọn Delete log group(s) Tại cửa sổ nổi, chọn Delete 5. Dọn dẹp dịch vụ API Gateway\nTại thanh tìm kiếm, nhập API Gateway Chọn API muốn xóa, bấm Delete ở bên phải Nhập confirm, bấm Delete Thực hiện tương tự với API còn lại Chúc mừng, bạn đã hoàn thành toàn bộ bài lab, qua phần này sẽ giúp bạn tiết kiệm chi phí sử dụng cho các dịch vụ AWS không còn sử dụng. Cảm ơn bạn đã dành thời gian đọc và làm bài lab này. "
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]